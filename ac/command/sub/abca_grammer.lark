statement: (command | expr) ["," statement]

command: command_in value value value
       | command_out value
       | command_undo
       | command_exit

command_in: "i"
command_out: "o"
command_undo: "u"
command_exit: "exit"

expr: expr1
    | decl
    | assign
    | tern
    | pluseq
    | minuseq
    | timeseq
    | diveq
    | divveq
    | poweq
    | modeq
    | lseq
    | rseq
decl: symbol ":=" expr
assign: symbol "=" expr
tern: expr1 "?" expr ":" expr
pluseq: symbol "+=" expr
minuseq: symbol "-=" expr
timeseq: symbol "*=" expr
diveq: symbol "/=" expr
divveq: symbol "//=" expr
poweq: symbol "**=" expr
modeq: symbol "%=" expr
lseq: symbol "<<=" expr
rseq: symbol ">>=" expr

expr1: expr2
     | lor
lor: expr1 "||" expr2

expr2: expr3
     | lxor
lxor: expr2 "^^" expr3

expr3: expr4
     | land
land: expr3 "&&" expr4

expr4: expr5
     | bor
bor: expr4 "|" expr5

expr5: expr6
     | bxor
bxor: expr5 "^" expr6

expr6: expr7
     | band
band: expr6 "&" expr7

expr7: expr8
     | eq
     | neq
eq: expr7 "==" expr8
neq: expr7 "!=" expr8

expr8: expr9
     | lt
     | gt
     | leq
     | geq
lt: expr8 "<" expr9
gt: expr8 ">" expr9
leq: expr8 "<=" expr9
geq: expr8 ">=" expr9

expr9: expr10
     | ls
     | rs
ls: expr9 "<<" expr10
rs: expr9 ">>" expr10

expr10: expr11
      | plus
      | minus
plus: expr10 "+" expr11
minus: expr10 "-" expr11

expr11: expr12
      | times
      | div
      | divv
      | mod
times: expr11 "*" expr12
div: expr11 "/" expr12
divv: expr11 "//" expr12
mod: expr11 "%" expr12

expr12: expr13
      | pow
pow: expr12 "**" expr13

expr13: value

value: number
     | string
     | list
     | symbol
     | priority
number: /-?\d+(\.\d)?([eE][+-]?\d+)?/
string: ESCAPED_STRING
list: "[" [value ("," value)*] "]"
symbol: WORD
priority: "(" expr ")"


%import common.WORD
%import common.ESCAPED_STRING
%import common.WS
%ignore WS
